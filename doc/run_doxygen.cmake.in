##generate the doxyfile to stdout
execute_process(COMMAND @DOXYGEN_EXECUTABLE@ -s -g - OUTPUT_VARIABLE doxygen_out)

##set any doxygen tag according to our needs, leave the rest untouched (= default)
# never use the absolute path for INPUT, otherwise call graphs might be generated with absolute
# paths inside. Use relative path and execute doxygen from within install dir WORKING_DIRECTORY
string(REGEX REPLACE "(INPUT +[=])"
                     "\\1 include/a_util doc README.md" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(RECURSIVE +[=]) NO"
                     "\\1 YES" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(PROJECT_NAME +[=]) \"My Project\""
                     "\\1 \"a_util_library\"" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(PROJECT_NUMBER +[=])"
                     "\\1 v@PROJECT_VERSION@" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(OUTPUT_DIRECTORY +[=])"
                     "\\1 @CMAKE_INSTALL_PREFIX@/doc" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(SHORT_NAMES +[=]) NO"
                     "\\1 YES" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(GENERATE_LATEX +[=]) YES"
                     "\\1 NO" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(HAVE_DOT +[=]) NO"
                     "\\1 @DOXYGEN_DOT_FOUND@" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(DOT_PATH +[=])"
                     "\\1 @DOXYGEN_DOT_EXECUTABLE@" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(EXAMPLE_PATH +[=])"
                     "\\1 doc/license 3rdparty" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(STRIP_FROM_INC_PATH +[=])"
                     "\\1 include/" doxygen_out ${doxygen_out})
string(REGEX REPLACE "(USE_MDFILE_AS_MAINPAGE +[=])"
                     "\\1 README.md" doxygen_out ${doxygen_out})

##generate the documentation with doxygen

file(WRITE @CMAKE_CURRENT_BINARY_DIR@/Doxyfile ${doxygen_out})
execute_process(COMMAND @DOXYGEN_EXECUTABLE@ @CMAKE_CURRENT_BINARY_DIR@/Doxyfile
                WORKING_DIRECTORY @CMAKE_INSTALL_PREFIX@)
