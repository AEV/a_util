name: C/C++ CI - branches and PRs

on: 
  push:
    branches:
        - '**'
    pull_request:

jobs:
  
  build-matrix:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['windows-latest', 'windows-2016', 'ubuntu-latest']
        include:
          - os: windows-latest
            install_req_packages: 'choco install doxygen.install ; choco install graphviz'
            cmake_generator: 'Visual Studio 16 2019'
            arch_key: '-A'
            arch_value: 'x64'
            toolset_key: '-T'
            toolset_value: 'v141'
            compress_cmd: '7z a -tzip "${env:PACKAGE_NAME}.zip" "${env:PACKAGE_NAME}"'
            compressed_suffix: 'zip'
            list_dir_cmd: 'dir'
          - os: windows-2016
            install_req_packages: 'choco install doxygen.install ; choco install graphviz'
            cmake_generator: 'Visual Studio 15 2017'
            arch_key: '-A'
            arch_value: 'x64'
            toolset_key: '-T'
            toolset_value: 'v140'
            compress_cmd: '7z a -tzip "${env:PACKAGE_NAME}.zip" "${env:PACKAGE_NAME}"'
            compressed_suffix: 'zip'
            list_dir_cmd: 'dir'
          - os: ubuntu-latest
            install_req_packages: 'sudo apt-get -y install cmake && sudo apt-get -y install doxygen && sudo apt-get -y install graphviz'
            cmake_generator: 'Unix Makefiles'
            arch_key: ''
            arch_value: ''
            toolset_key: ''
            toolset_value: ''
            compress_cmd: 'tar -cvzf ${PACKAGE_NAME}.tgz ./${PACKAGE_NAME}'
            compressed_suffix: 'tgz'
            list_dir_cmd: 'ls -la'
    
    steps:
    - uses: actions/checkout@v1
    - name: Get the branch name
      id: get_branch_name
      run: echo ::set-output name=BRANCH_NAME::${GITHUB_REF/refs\/heads\//}
      shell: bash
    - name: get required packages
      run: ${{ matrix.install_req_packages }}
    - name: configure CMake
      run: |
        mkdir _build
        cd _build
        cmake -G "${{ matrix.cmake_generator }}" ${{ matrix.arch_key }} ${{ matrix.arch_value }} ${{ matrix.toolset_key }} ${{ matrix.toolset_value }} -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="..\\a_util_${{ matrix.os }}-${{ matrix.arch_value }}-${{ matrix.toolset_value }}-${{ steps.get_branch_name.outputs.BRANCH_NAME }}"  ..
    - name: cmake build
      run: |
        cd _build
        cmake --build .
    - name: cmake install
      run: |
        cd _build
        cmake --build . --target install
    #- name: test
    #  run: |
    #    cd _build
    #    ctest
    - name: Upload artifacts to current run
      uses: actions/upload-artifact@master
      with:
        name: a_util_${{ matrix.os }}-${{ matrix.arch_value }}-${{ matrix.toolset_value }}-${{ steps.get_branch_name.outputs.BRANCH_NAME }}
        path: a_util_${{ matrix.os }}-${{ matrix.arch_value }}-${{ matrix.toolset_value }}-${{ steps.get_branch_name.outputs.BRANCH_NAME }}
    - name: Create compressed package
      env:
        PACKAGE_NAME: a_util_${{ matrix.os }}-${{ matrix.arch_value }}-${{ matrix.toolset_value }}-${{ steps.get_branch_name.outputs.BRANCH_NAME }}
      run: |
        ${{ matrix.compress_cmd }}
        ${{ matrix.list_dir_cmd }}

